Hereâ€™s a summary of everything we learned while building the to-do app:


---

1. Backend Development with Express.js and MongoDB

Setting up a Node.js backend:

Initialized a Node.js project with npm init.

Installed necessary dependencies: express, mongoose, and cors.


Connecting to a database:

Used MongoDB (local and Atlas) for data storage.

Connected the backend to MongoDB using Mongoose.


Creating a REST API:

Built CRUD endpoints (GET, POST, PUT, DELETE) for tasks:

GET /tasks - Fetch all tasks.

POST /tasks - Add a new task.

PUT /tasks/:id - Update a task.

DELETE /tasks/:id - Delete a task.



Error handling and testing:

Tested APIs using tool Thunder Client.

Managed errors gracefully with appropriate status codes and messages.


CORS setup:

Configured CORS to enable communication between the backend and frontend.




---

2. Frontend Development with React.js

Setting up a React app:

Used npx create-react-app to scaffold the frontend project.

Organized components for better structure (App.js, TaskForm.js, TaskList.js).


React basics:

Used state (useState) to manage data.

Learned about props to pass data and functions between components.

Utilized useEffect for lifecycle management, such as fetching data from the backend.


Integrating Axios:

Installed and used axios to make HTTP requests to the backend.

Learned how to handle responses and errors from API calls.


Frontend-Backend Communication:

Ensured the frontend could perform CRUD operations by connecting it to the backend endpoints.


Refreshing the page after actions:

Triggered re-renders by updating state after adding, editing, or deleting tasks.




---

3. Styling

Custom CSS:

Styled the app using a separate styles.css file.

Designed input fields, buttons, and the task list for better user experience.




---

6. Key Concepts Learned

MERN stack basics:

Learned how the MERN stack (MongoDB, Express.js, React.js, Node.js) works together.


API creation and integration:

Understood how to build and consume REST APIs.


State management in React:

Managed state effectively using useState and useEffect.


Full-stack development workflow:

Learned how the frontend and backend communicate, and how to integrate them seamlessly.




---

Future Enhancements

1. Add authentication (e.g., login system).


2. Implement better error handling and user feedback.


3. Deploy the app on a custom domain.


4. Improve the design with advanced CSS or frameworks.

